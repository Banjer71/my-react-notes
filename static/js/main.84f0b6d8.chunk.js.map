{"version":3,"sources":["logo.svg","User.js","Button_change.js","components/Main.js","navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","User","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLastNameVisible","setState","_this2","react_default","a","createElement","className","style","margin","firstName","lastName","onClick","toggleLastName","Component","Button_change","count","prevState","resetState","double","half","handleClick","resetCount","doubleTheNumber","halfTheNumber","Main","src_User","src_Button_change","Navbar","src","React_Logo","alt","id","App","navbar_Navbar","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84f0b6d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cd2fd5e7.svg\";","import React, {Component} from 'react'\r\n\r\nclass User extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isLastNameVisible: true};\r\n    }\r\n\r\n    toggleLastName() {\r\n        this.setState({isLastNameVisible: !this.state.isLastNameVisible});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='myname'>\r\n                <p className='testo' style={{margin: '10px'}}>\r\n                <span className='space'>{this.props.firstName}</span>\r\n                {!this.state.isLastNameVisible && this.props.lastName} {\r\n                    <button onClick= {() => this.toggleLastName()}>\r\n                        Toggle Last Name\r\n                    </button>\r\n                }\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default User","import React, { Component } from 'react'\r\n\r\n\r\nclass Button_change extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {count: 0}\r\n    }\r\n\r\n\r\n    handleClick() {\r\n        return  this.setState(prevState => {\r\n            return {count: prevState.count +1}\r\n        });\r\n    }\r\n\r\n    resetCount() {\r\n        return this.setState(resetState => {\r\n            return {count: resetState.count = 0}\r\n        });\r\n    }\r\n\r\n    doubleTheNumber(    ) {\r\n        return this.setState(double => {\r\n            return {count: double.count * 2}\r\n        });\r\n    }\r\n\r\n    halfTheNumber() {\r\n        return this.setState(half => {\r\n            return {count: half.count / 2}\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.state.count}</h1>\r\n                <button onClick={() => this.handleClick()}>Change</button>\r\n                <button onClick={() => this.resetCount()}>Reset</button>\r\n                <button onClick={() => this.doubleTheNumber()}>Double it!</button>\r\n                <button onClick={() => this.halfTheNumber()}>Half it!</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button_change","import React from 'react'\r\nimport User from '../User';\r\nimport ButtonChange from '../Button_change'\r\n\r\n\r\nfunction Main() {\r\n    return (\r\n        <div className='main'>\r\n            <User firstName= \"Davide\"  lastName=\"Naccarati\" />\r\n            <ButtonChange className='btn' />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Main","import React from 'react'\r\nimport React_Logo from '../logo.svg'\r\nimport './nav.css'\r\nimport '../App.css'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav>\r\n            <div className='main-logo'>\r\n            <img src={React_Logo} alt='Logo' />\r\n                <h1 id=\"logo\" className='logo-text'>My React notes</h1>\r\n            <img src={React_Logo} alt='Logo' />\r\n            </div>\r\n        </nav>\r\n    \r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Navbar","import React, { Component } from 'react';\n\nimport Main from './components/Main'\n//import User from './User'\n//import ButtonChange from './Button_change'\nimport './App.css';\nimport Navbar from './navbar/Navbar';\n\n\n\n\nclass App extends Component {\n  \n  render() { \n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Main />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}